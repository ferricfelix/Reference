string = "string {}"
string.format("stuff")
'string stuff'

alpha_list = list('abcde')                                                                        
alpha_list                                                                                        
['a', 'b', 'c', 'd', 'e']    

Split
"Hello there".split() produces ["Hello", "there"].
"name;age;address".split(";") produces ["name", "age", "address"].

Join
my_favorite_colors = ["green", "black", "silver"]
my_string = "My favorite colors are "
my_string + ", ".join(my_favorite_colors)

is compares whether or not two things are in the same place in memory

if not age > 25000:
    print("Whippersnapper")

"java" in "javascript" would give back True
5 in [3, 4, 1] would give back False

Loops
numbers = [1, 2, 3, 4]
doubles = []
for number in numbers:
    doubles.append(number*2)

start = 99
while start:
    print("{} bottles of milk on the wall, {} bottles of milk.".format(start, start))
    print("Take one down and pour it on some cereal.")
    start -= 1
    print("{} bottles of milk on the wall.".format(start))

for letter in "abcdef":
    if letter == "c":
        break
    print(letter)

for letter in "abcdef":
    if letter == "c":
        continue
    print(letter)

We use the input() function to get information from a user.

input("WHAT is your favorite color? ") takes an optional prompt to use when you need to ask the user a particular question. Python doesn't add any space at the end of the prompt, though, so remember to do that yourself.

The value that comes in from input() is always a string, so if you need a number or something else, you'll need to convert it afterward.

The basics of creating a function are always the same.

def function_name(argument):

It always starts with the keyword def. Next comes the function name, which follows the same rules as variable names, so no spaces, hyphens, and it can't start with a number. After that is a set of parentheses which have your function's arguments, if any, in them. And then, of course, the line ends with a colon.

The body of the function should be indented.

If you want your function to be able to give an answer back to wherever it was called, like to a variable name or another function, you need to use the return keyword at the end of the function along with whatever value you want returned.

def even(num):
    if num % 2 == 0:
        return True
    else:
        return False
This function will return True or False depending on whether or not a number is evenly divisible by 2. As a test, can you think of a simpler way to write this?

Exceptions
We handle exceptions with two blocks, try and except.

The try block is just that, the word try followed by a colon. Inside of the block, indented, is the code that you think might 'cause an issue.

try:
    num = int(input("What is the airspeed velocity of an unladen swallow? "))
Now, someone might not give us a number for that and that would cause a ValueError. So let's catch it!

except ValueError:
This block will only trigger if the code in the try caused a ValueError. If the code in the try triggered a TypeError instead, though, this code would never run.

You'll want to create an except block for every type of exception your try block might cause.

Finally, you'll probably want an else block. This block will happen if your try didn't cause any exceptions.

Example

try:
    speed = int(input("What is the airspeed velocity of an unladen swallow? "))
except ValueError:
    print("What? I don't kno-oooooooooooooooo!")
else:
    print("I think a swallow could go faster than {}.".format(speed))

import random will bring in the random library and we'll have access to everything in the random library by using dot notation. For example, the randint function belongs to the random library. If we want to use it, we do random.randint().

dir() lists attributes of the object
